# ==========================
# 📦 IMPORT LIBRARY
# ==========================
import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

# ==========================
# ⚙️ LOAD MODEL
# ==========================
@st.cache_resource
def load_model():
    try:
        model = tf.keras.models.load_model("model/Syahma_Laporan_4.h5")
        return model
    except Exception as e:
        st.error(f"Gagal memuat model klasifikasi: {e}")
        return None

model = load_model()

# ==========================
# 🎨 UI DASHBOARD
# ==========================
st.set_page_config(page_title="Klasifikasi Gambar", page_icon="🧠", layout="centered")
st.title("🧠 Aplikasi Klasifikasi Gambar")
st.markdown("Unggah gambar untuk diprediksi menggunakan model deep learning.")

uploaded_file = st.file_uploader("📤 Unggah gambar di sini:", type=["jpg", "jpeg", "png"])

if uploaded_file is not None and model is not None:
    try:
        img = Image.open(uploaded_file)

        # ==========================
        # 🔍 Ambil ukuran input model
        # ==========================
        _, model_height, model_width, model_channels = model.input_shape

        # ==========================
        # ⚙️ Sesuaikan channel
        # ==========================
        if model_channels == 3:
            img = img.convert('RGB')
        elif model_channels == 1:
            img = img.convert('L')

        # ==========================
        # ⚙️ Resize sesuai model
        # ==========================
        img_resized = img.resize((model_width, model_height))

        # ==========================
        # ⚙️ Konversi ke array, normalisasi
        # ==========================
        img_array = np.array(img_resized).astype('float32') / 255.0

        # Jika grayscale, tambahkan channel axis
        if model_channels == 1 and img_array.ndim == 2:
            img_array = np.expand_dims(img_array, axis=-1)

        # Tambahkan dimensi batch
        img_array = np.expand_dims(img_array, axis=0)  # Shape (1,H,W,C)

        # ==========================
        # ⚠️ Debug info
        # ==========================
        st.write("Input shape model:", model.input_shape)
        st.write("Shape input gambar:", img_array.shape)
        st.image(img, caption="Gambar yang diunggah", use_container_width=True)
        st.write("🔄 Memproses gambar...")

        # ==========================
        # 📊 PREDIKSI
        # ==========================
        prediction = model.predict(img_array)
        predicted_class = np.argmax(prediction)
        confidence = np.max(prediction)

        # ==========================
        # 💬 HASIL
        # ==========================
        st.success(f"Hasil Prediksi: **Kelas {predicted_class}**")
        st.write(f"Tingkat Kepercayaan: **{confidence:.2f}**")

    except Exception as e:
        st.error(f"Terjadi kesalahan saat klasifikasi: {e}")

else:
    if model is None:
        st.error("Model belum berhasil dimuat.")
    else:
        st.info("Silakan unggah gambar untuk memulai klasifikasi.")

